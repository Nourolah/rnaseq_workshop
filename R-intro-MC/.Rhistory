setwd("~/GoogleDrive/projects/rnaseq_workshop/R-intro-MC")
?head
pbsc = read.csv('PBSC-comma.txt', header = TRUE)
pbsc
knitr::opts_chunk$set(echo = TRUE, eval=FALSE)
pbsc[2:4]
colnames(pbsc)
which(colnames(pbsc) == "A")
get_columns_by_names = function(my_data_frame, first_name, last_name) {
df_column_names = colnames(my_data_frame)
first_position = which(df_column_names == first_name)
second_position = which(df_column_names == second_name)
my_data_frame[first_name:last_name]
}
get_columns_by_names(pbsc, "A", "C")
get_columns_by_names = function(my_data_frame, first_name, last_name) {
df_column_names = colnames(my_data_frame)
first_position = which(df_column_names == first_name)
second_position = which(df_column_names == last_name)
my_data_frame[first_name:last_name]
}
get_columns_by_names(pbsc, "A", "C")
get_columns_by_names = function(my_data_frame, first_name, last_name) {
df_column_names = colnames(my_data_frame)
first_position = which(df_column_names == first_name)
last_position = which(df_column_names == last_name)
my_data_frame[first_position:last_position]
}
get_columns_by_names(pbsc, "A", "C")
pbsc
get_columns_by_names(pbsc, "C", "A") # reversed
pbsc %>% head()
library(magrittr)
pbsc %>% head()
pbsc %>%
head() %>% # the output from the previous operator will be the first argument in the next operator
`[`( 2:4)
`[`(pbsc, 2:4)
pbsc %>%
colnames()
pbsc %>%
colnames(2:4)
pbsc %>%
colnames(2:4)
base_content = c(0.25, 0.34, 0.26, 0.15)
pbsc %>%
colnames() %>%
sum(base_content)
base_content = c(0.25, 0.34, 0.26, 0.15)
pbsc %>%
colnames() %>%
sum(base_content)
sum(base_content)
pbsc %>%
colnames()
base_content = c(0.25, 0.34, 0.26, 0.15)
names(base_content) = c('A','T','G','C')
base_content
pbsc %>%
colnames()
pbsc %>%
colnames() %>%
`[`(-1)
workshop_comment = 'I really like the RNASeq workshop. I enjoy this very much!'
workshop_comment = 'I really do not like the RNASeq workshop!'
gsub('do not', 'do', workshop_comment)
workshop_comment %>%
gsub('do not', 'do')
workshop_comment %>%
gsub('do not', 'do')
workshop_comment %>%
(function(comment) {
gsub('do not', 'do', comment)
})
pbsc
filter(pbsc, G > 20)
library(dplyr)
filter(pbsc, G > 20)
filter(pbsc, G > 30)
filter(pbsc, G > 25)
filter(pbsc, G > 25, A > 25)
filter(pbsc, X.Base %in% 1:5 )
filter(pbsc, X.Base %in% 5:10 ) # get values from base 5 to 10
filter(pbsc, X.Base %in% 5:14 ) # get values from base 5 to 10
filter(pbsc, X.Base %in% 2:5 ) # get values from base 5 to 10
pbsc$G > 25
pbsc$G >25 & pbsc$A > 25
pbsc$X.Base %in% 2:5
select(pbsc, G, A)
select(pbsc, G:C)
select(pbsc, -(G:C))
mtcars
data(package='datasets')
AirPassengers
DNase
Orange
PlantGrowth
iris
iris
select(iris, starts_with('Sepal'))
iris
select(iris, ends_with('Length'))
iris
select(iris, contains('tal'))
iris
select(iris, contains('al'))
iris
select(iris, matches("\w"))
select(iris, matches("\\w"))
select(iris, matches("\\."))
select(iris, matches("\."))
select(iris, matches("."))
select(iris, matches("\\\."))
select(iris, matches("\\."))
iris
arrange(pbsc, Sepal.length)
arrange(pbsc, G)
arrange(pbsc, G, A)
iris
arrange(iris, Petal.Length)
arrange(iris, Petal.Length, Petal.Width)
arrange(iris, desc(Petal.Length), Petal.Width) # descending order
pbsc
pbsc_na$phred = sample(c(20:60, rep(NA, 10)), nrow(pbsc_na), replace = TRUE)
pbsc_na = pbsc
pbsc_na$phred = sample(c(20:60, rep(NA, 10)), nrow(pbsc_na), replace = TRUE)
pbsc_na
pbsc_na %>%
filter(is.na(phred))
pbsc_na %>%
filter(!is.na(phred)) # select all rows that phred is not NA
mutate(pbsc,
GC = G + C,
AT = A + G)
mutate(pbsc,
GC = G + C,
AT = A + G,
GA_to_AT = GC/AT)
transmute(pbsc,
GC = G + C,
AT = A + G,
GA_to_AT = GC/AT)
mutate(pbsc,
GC = G + C,
AT = A + G,
GC_bias = GC > AT) %>%
filter(GC_bias)
summarise(pbsc, GC = G + C)
summarise(pbsc, average_G = mean(G))
by_day <- group_by(flights, year, month, day)
library(nycflights13)
by_day <- group_by(flights, year, month, day)
by_day
class(by_day)
mtcars
?grouped_df
?group_by
mtcars
group_by(mtcars)
mtcars
group_by(mtcars)
group_by(mtcars)
mtcars
grouped = group_by(mtcars)
grouped # what does the data look like now?
class(grouped)
grouped = group_by(mtcars, cyl)
grouped # what does the data look like now?
class(grouped)
grouped_mtcars = group_by(mtcars, cyl)
grouped_mtcars # what does the data look like now?
class(grouped_mtcars) #
grouped_mtcars
summarise(grouped_mtcars, mean(mpg))
group_by(mtcars, cyl, gear, carb) %>%
summarise(mean(mpg), max(disp), min(wt))
