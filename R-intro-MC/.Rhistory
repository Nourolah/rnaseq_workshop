setwd("~/GoogleDrive/projects/rnaseq_workshop/R-intro-MC")
?ddply
?aaply
library(plyr)
?aaply
knitr::opts_chunk$set(echo = TRUE, eval=FALSE)
mtcars
mtcars
iris
iris
mtcars
iris
aaply(.data=mtcars, .margins=2, mean)
library(plyr)
aaply(.data=mtcars, .margins=2, mean)
mtcars_matrix = as.matrix(mtcars)
aaply(.data=mtcars, .margins=2, mean)
mtcars
mtcars_matrix
str(mtcars_matrix)
aaply(.data=mtcars_matrix, .margins=2, mean)
adply(.data=mtcars_matrix, .margins=2, mean)
?adply
adply(.data=mtcars, .margins=2, mean)
adply(.data=mtcars_matrix, .margins=2, mean)
aaply(.data=mtcars_matrix, .margins=2, mean)
aaply(.data=mtcars_matrix, .margins=2, mean)
adply(.data=mtcars_matrix, .margins=2, mean)
alply(.data=mtcars_matrix, .margins=2, mean)
alply(.data=mtcars_matrix, .margins=2, mean, .dims=TRUE)
a_ply(.data=mtcars_matrix, .margins=2, .fun=mean)
mtcars
data()
DNase
airquality
rock
swiss
mtcars_t = t(mtcars)
mtcars_t %>% head()
head(mtcars_t)
aaply(.data=mtcars_t, .margins = 1, function(x){x/max(x)} )
adply(.data=mtcars_t, .margins = 1, function(x){x/max(x)} )
alply(.data=mtcars_t, .margins = 1, function(x){x/max(x)}, .dims = TRUE )
mtcars_relative = aaply(.data=mtcars_t, .margins = 1, function(x){x/max(x)} )
mtcars_relative
aaply(.data = mtcars_relative, .margins = c(1, 2),
.fun = function(x) {ifelse(x>0.5, 'high', 'low')})
aaply(.data = mtcars_relative, .margins = c(1, 2),
.fun = function(x) {ifelse(x>0.5, yes = 'high', no = 'low')}) # define an anynomous function
aaply(.data = mtcars_relative, .margins = c(1, 2),
.fun = ifelse, yes='high', no='low')
?dplyr
?ddplyr
?ddply
iris
mtcars
ddply(.data = mtcars, .variables = c('cyl'), colMeans)
mtcars
ddply(.data = mtcars, .variables = 'cyl', colMeans)
ddply(.data = mtcars, .variables = 'cyl', mutate, mpg_to_cyl = mpg/cyl)
ddply(.data = mtcars, .variables = c('cyl', 'vs'), colMeans)
ddply(.data = mtcars, .variables = c('cyl', 'vs'), mean)
ddply(.data = mtcars, .variables = c('cyl', 'vs'),
function(x) {
aaply(.data = x, .margins = 2, mean)
})
aaply(.data = as.matrix(x), .margins = 2, mean)
x = as.matrix(x)
daply(.data = x, .margins = 2, mean)
ddply(.data = mtcars, .variables = c('cyl', 'vs'), print)
dlply(.data = mtcars, .variables = c('cyl', 'vs'), function(x) {x})
dlply(.data = mtcars, .variables = 'cyl', function(x) {str(x)})
dlply(.data = mtcars, .variables = 'cyl', function(x) {is.data.frame(x)})
x = as.matrix(x)
print(x)
ddply(.data = mtcars, .variables = 'cyl',
function(x) {
print(x)
})
daply(x, 2, mean)
ddply(.data = mtcars, .variables = 'cyl', daply, 2, mean)
ddply(.data = mtcars, .variables = 'cyl', ddply, 2, mean)
ddply(.data = mtcars, .variables = 'cyl', ldply, 2, mean)
ddply(.data = mtcars, .variables = 'cyl', laply, 2, mean)
ddply(.data = mtcars, .variables = 'cyl', aaply, 2, mean)
ddply(.data = mtcars, .(cyl), aaply, 2, mean)
ddply(.data = as.matrix(mtcars), .(cyl), aaply, 2, mean)
ddply(.data = mtcars, .(cyl), aaply, 2, mean)
ddply(.data = mtcars, .(cyl), aaply, 2, print)
ddply(.data = mtcars, .(cyl), ddply, 2, print)
ddply(.data = mtcars, .(cyl), adply, 2, print)
daply(.data = mtcars, .(cyl), adply, 2, print)
dlply(.data = mtcars, .(cyl), adply, 2, print)
str(mtcars)
ddply(.data = mtcars, .variables = .(cyl), summarise,
mean_mpg = mean(mpg),
sd_mpg = sd(mpg))
?group_by
library(dplyr)
?group_by
mtcars_by_cyl = group_by(mtcars, cyl)
summarise(mtcars_by_cyl,
mean_mpg = mean(mpg),
sd_mpg = sd(mpg))
ddply(.data = mtcars, .variables = .(cyl), summarise,
mean_mpg = mean(mpg),
sd_mpg = sd(mpg))
mtcars_list = as.list(mtcars)
mtcars_list
ldply(.data = mtcars_list, .fun = mean)
letters
my_functions = l(mean, sum)
my_functions = list(mean, sum)
my_functions
my_functions
my_functions = list(mean, sum, sd, max, min, length)
my_functions
ldply(.data = my_functions, .fun = x, mtcars$mpg)
ldply(.data = my_functions, print)
ldply(.data = my_functions, function(x) {x(mtcars$mpg)})
laply(.data = my_functions, function(x) {x(mtcars$mpg)})
ldply(.data = my_functions, function(x) {x(mtcars$mpg)})
c( mean(mtcars$mpg),
sum(mtcars$mpg),
sd(mtcars$mpg),
max(mtcars$mpg),
min(mtcars$mpg),
length(mtcars$mpg) )
ldply(.data = my_functions, function(x) {x(mtcars$mpg)})
laply(.data = my_functions, function(x) {x(mtcars$mpg)})
c( mean(mtcars$mpg),
sum(mtcars$mpg),
sd(mtcars$mpg),
max(mtcars$mpg),
min(mtcars$mpg),
length(mtcars$mpg) )
mtcars
iris
l_ply(iris, shapiro.test)
iris_list = as.list(iris)
l_ply(iris_list, shapiro.test)
d_ply(iris[, 1:4], shapiro.test)
l_ply(iris[, 1:4], shapiro.test)
llply(iris[, 1:4], shapiro.test)
mtcars
mtcars
l_ply(mtcars, plot, x=mtcars$mpg)
l_ply(mtcars, plot, x=mtcars$mpg)
?l_ply
llply(mtcars, plot, x=mtcars$mpg,)
l_ply(mtcars, plot, x=mtcars$mpg,)
l_ply(mtcars, plot, x=mtcars$mpg)
ldply(mtcars, plot, x=mtcars$mpg)
ldply(mtcars, plot, x=mtcars$mpg)
l_ply(mtcars, plot, x=mtcars$mpg)
l_ply(mtcars, plot, x=mtcars$mpg)
l_ply(mtcars, plot, x=mtcars$mpg, xlab=names(x))
plot(x, mtcars$mpg, xlab='mpg')
l_ply(mtcars, function(x) {
plot(x, mtcars$mpg, xlab='mpg')
})
plot(x, mtcars$mpg, xlab='mpg', names(x))
l_ply(mtcars, function(x) {
plot(x, mtcars$mpg, xlab='mpg', names(x))
})
plot(x, mtcars$mpg, xlab='mpg', ylab=names(x))
l_ply(mtcars, function(x) {
plot(x, mtcars$mpg, xlab='mpg', ylab=names(x))
})
l_ply(as.list(mtcars), function(x) {
plot(x, mtcars$mpg, xlab='mpg', ylab=names(x))
})
plot(x, mtcars$mpg, xlab='mpg')
l_ply(as.list(mtcars), function(x) {
plot(x, mtcars$mpg, xlab='mpg')
})
l_ply(as.list(mtcars), function(x) {
plot(x, y=mtcars$mpg, xlab='mpg')
})
plot(x, y=mtcars$mpg, ylab='mpg')
l_ply(as.list(mtcars), function(x) {
plot(x, y=mtcars$mpg, ylab='mpg')
})
l_ply(as.list(mtcars), plot, y=mtcars$mpg)
l_ply(as.list(mtcars), plot, y=mtcars$mpg, ylab='mpg')
mtcars_list = as.list(mtcars)
mtcars_t
mtcars_list
llply(mtcars_list, print(names(x)))
llply(mtcars_list, function(x) {
print(names(x))
})
mtcars_list
names(mtcars_list)
names(mtcars_list[[1]])
names(mtcars_list[1])
?llply
colnames(mtcars_list)
attributes(mtcars_list)
list_names = names(mtcars_list)
list_names
l_ply(list_names, function(x){
plot(x=mtcars_list[x], y=mtcars$mpg, xlab = x, ylab = 'mpg')
})
mtcars[x]
mtcars_list
l_ply(list_names, function(x){
plot(x=mtcars_list[[x]], y=mtcars_list[['mpg']], xlab = x, ylab = 'mpg')
})
l_ply(list_names, function(x){
png(filename = paste0(x, '.png'))
plot(x=mtcars_list[[x]], y=mtcars_list[['mpg']], xlab = x, ylab = 'mpg')
dev.off()
})
?`<<-`
my_plots = list() # create an empty lits to store the plots.
l_ply(list_names, function(x){
myplots[x] = plot(x=mtcars_list[[x]], y=mtcars_list[['mpg']], xlab = x, ylab = 'mpg')
})
l_ply(list_names, function(x){
myplots[x] <<- plot(x=mtcars_list[[x]], y=mtcars_list[['mpg']], xlab = x, ylab = 'mpg')
})
my_plots = list() # create an empty lits to store the plots.
l_ply(list_names, function(x){
myplots[x] <- plot(x=mtcars_list[[x]], y=mtcars_list[['mpg']], xlab = x, ylab = 'mpg')
})
l_ply(list_names, function(x){
myplots[x] <<- plot(x=mtcars_list[[x]], y=mtcars_list[['mpg']], xlab = x, ylab = 'mpg')
})
my_plots = list() # create an empty lits to store the plots.
l_ply(list_names, function(x){
my_plots[x] <- plot(x=mtcars_list[[x]], y=mtcars_list[['mpg']], xlab = x, ylab = 'mpg')
})
my_plots
l_ply(list_names, function(x){
my_plots[x] <<- plot(x=mtcars_list[[x]], y=mtcars_list[['mpg']], xlab = x, ylab = 'mpg')
})
my_plots
l_ply(list_names, function(x){
my_plots[x] <<- plot(x=mtcars_list[[x]], y=mtcars_list[['mpg']], xlab = x, ylab = 'mpg')
})
plot1 = plot(1:10)
plot1
l_ply(mtcars, shapiro.test)
llply(mtcars, shapiro.test)
ldply(mtcars, shapiro.test)
l_ply(mtcars, shapiro.test)
shapiro.test(mtcars$mpg)
summary(shapiro.test(mtcars$mpg))
shapiro.test(mtcars$mpg)
names(shapiro.test(mtcars$mpg))
shapiro.test(mtcars$mpg)$statistic
shapiro.test(mtcars$mpg)
shapiro.test(mtcars$mpg)
shapiro.test(mtcars$mpg)$statistic
shapiro.test(mtcars$mpg)$p.value
single_res = c(shapiro.test(mtcars$mpg)$statistic,
shapiro.test(mtcars$mpg)$p.value)
names(single_res) = c('W', 'p value')
single_res
list_names
shapiro_results = data.frame()
shapiro_results = data.frame()
l_ply(mtcars, shapiro.test)
ldply(list_names, function(x){
single_res = c(shapiro.test(mtcars[x])$statistic,
shapiro.test(mtcars[x])$p.value)
names(single_res) = c('W', 'p value')
shapiro_results[x] = single_res
})
ldply(list_names, function(x){
single_res = c(shapiro.test(mtcars[[x]])$statistic,
shapiro.test(mtcars[[x]])$p.value)
names(single_res) = c('W', 'p value')
shapiro_results[x] = single_res
})
ldply(list_names, function(x){
single_res = c(shapiro.test(mtcars[[x]])$statistic,
shapiro.test(mtcars[[x]])$p.value)
names(single_res) = c('W', 'p value')
shapiro_results[x] <<- single_res
})
ldply(list_names, function(x){
single_res = c(shapiro.test(mtcars[[x]])$statistic,
shapiro.test(mtcars[[x]])$p.value)
names(single_res) = c('W', 'p value')
shapiro_results[[x]] <<- single_res
})
shapiro_results = list()
ldply(list_names, function(x){
single_res = c(shapiro.test(mtcars[[x]])$statistic,
shapiro.test(mtcars[[x]])$p.value)
names(single_res) = c('W', 'p value')
shapiro_results[x] <<- single_res
})
print(single_res)
ldply(list_names, function(x){
single_res = c(shapiro.test(mtcars[[x]])$statistic,
shapiro.test(mtcars[[x]])$p.value)
names(single_res) = c('W', 'p value')
print(single_res)
print(x)
# shapiro_results[x] <<- single_res
})
shapiro_results = list()
ldply(list_names, function(x){
single_res = c(shapiro.test(mtcars[[x]])$statistic,
shapiro.test(mtcars[[x]])$p.value)
names(single_res) = c('W', 'p value')
print(single_res)
print(x)
shapiro_results[x] <<- single_res
})
ldply(list_names, function(x){
single_res = c(shapiro.test(mtcars[[x]])$statistic,
shapiro.test(mtcars[[x]])$p.value)
names(single_res) = c('W', 'p value')
print(single_res)
print(x)
shapiro_results[[x]] <<- single_res
})
shapiro_results
as.data.frame(shapiro_results)
pbsc = read.csv('PBSC-comma.txt', header = TRUE)
pbsc
pbsc = read.csv('PBSC-comma.csv', header = TRUE)
pbsc = read.csv('PBSC-comma.txt', header = TRUE)
pbsc = read.table('PBSC-comma.txt', header = TRUE)
pbsc
pbsc = read.csv('PBSC-comma.txt', header = TRUE)
pbsc
pbsc[2:4]
get_columns_by_names = function(my_data_frame, first_name, last_name) {
df_column_names = colnames(my_data_frame)
first_position = which(df_column_names == first_name)
last_position = which(df_column_names == last_name)
my_data_frame[first_position:last_position]
}
get_columns_by_names(pbsc, "A", "C")
get_columns_by_names(pbsc, "C", "A") # reversed
